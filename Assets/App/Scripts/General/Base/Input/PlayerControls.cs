//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/App/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerControl"",
            ""id"": ""2b17a749-c18f-4842-8a70-7b9d54ebe676"",
            ""actions"": [
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""35cbae53-38f7-4c1f-b3ec-65445692dd43"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8f81147c-7299-449b-8488-72653e54753f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dc4e1e34-92b8-4dbb-94be-5978b8a66900"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""a69c68bd-7013-42a8-836c-dc02f007c370"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""db65bf98-8ad6-4e86-9e28-9f3d8f34cbca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""c2cf4c25-94f8-4c13-aa32-3b03e5a0fb1e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightBtnUse"",
                    ""type"": ""Button"",
                    ""id"": ""5797a2ef-cd0c-4c2e-985f-4cc130d743c0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftBtnUse"",
                    ""type"": ""Button"",
                    ""id"": ""63a98d28-3485-4f12-b841-a07956f93513"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39ad63ce-4a29-4c88-aa06-7ef96b1e5f92"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""d55c90da-813f-4a07-a809-1059f3f3b6fc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7cc1d20b-55ef-4383-8784-539daa612c89"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""61726595-0cb5-476a-a74f-3cae79930736"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8f8e6626-16fd-4b41-a9a8-f44468283ba7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""95defc9b-8254-4f54-a0b3-0ae7a7b3beee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a92ed033-ab9c-4c68-a0d3-2b82a84c0ff1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d380d93-6a53-46db-9afc-22857f42637f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8faa9170-d899-4608-ac27-ea681a3160b9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7941bbdd-0dcf-4bc4-964b-5601ddb3a060"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00e6a389-c46c-4fdc-8c0d-48c856b574b6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightBtnUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""617a84dc-3101-4c89-bcbf-3c85de985c9d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftBtnUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIControl"",
            ""id"": ""fc3d1650-8065-4c60-a509-b744c47c6542"",
            ""actions"": [
                {
                    ""name"": ""QuicklyShift"",
                    ""type"": ""Button"",
                    ""id"": ""30fd9b78-16e7-4199-88a0-4cfbdfd7bbc4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f8741149-61b6-4760-9259-bcf21d51dfcb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cc0ad502-d970-43b7-9fad-d45b4c54f233"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerInventory"",
                    ""type"": ""Button"",
                    ""id"": ""b4bf30d0-3b62-4d09-8a68-f2f076f5dbd1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b793725-3928-4999-b169-4a39673b3d50"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuicklyShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95588be7-ccc9-4792-9fa7-97fe55a955ad"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e77bf0eb-5c70-4c8c-8887-da3591a00a6a"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03e4f983-7f1f-46a8-9ce4-92efa19c66a8"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControl
        m_PlayerControl = asset.FindActionMap("PlayerControl", throwIfNotFound: true);
        m_PlayerControl_MouseLook = m_PlayerControl.FindAction("MouseLook", throwIfNotFound: true);
        m_PlayerControl_Move = m_PlayerControl.FindAction("Move", throwIfNotFound: true);
        m_PlayerControl_Jump = m_PlayerControl.FindAction("Jump", throwIfNotFound: true);
        m_PlayerControl_Run = m_PlayerControl.FindAction("Run", throwIfNotFound: true);
        m_PlayerControl_MousePosition = m_PlayerControl.FindAction("MousePosition", throwIfNotFound: true);
        m_PlayerControl_Interaction = m_PlayerControl.FindAction("Interaction", throwIfNotFound: true);
        m_PlayerControl_RightBtnUse = m_PlayerControl.FindAction("RightBtnUse", throwIfNotFound: true);
        m_PlayerControl_LeftBtnUse = m_PlayerControl.FindAction("LeftBtnUse", throwIfNotFound: true);
        // UIControl
        m_UIControl = asset.FindActionMap("UIControl", throwIfNotFound: true);
        m_UIControl_QuicklyShift = m_UIControl.FindAction("QuicklyShift", throwIfNotFound: true);
        m_UIControl_Pause = m_UIControl.FindAction("Pause", throwIfNotFound: true);
        m_UIControl_Scroll = m_UIControl.FindAction("Scroll", throwIfNotFound: true);
        m_UIControl_TriggerInventory = m_UIControl.FindAction("TriggerInventory", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        Debug.Assert(!m_PlayerControl.enabled, "This will cause a leak and performance issues, PlayerControls.PlayerControl.Disable() has not been called.");
        Debug.Assert(!m_UIControl.enabled, "This will cause a leak and performance issues, PlayerControls.UIControl.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControl
    private readonly InputActionMap m_PlayerControl;
    private List<IPlayerControlActions> m_PlayerControlActionsCallbackInterfaces = new List<IPlayerControlActions>();
    private readonly InputAction m_PlayerControl_MouseLook;
    private readonly InputAction m_PlayerControl_Move;
    private readonly InputAction m_PlayerControl_Jump;
    private readonly InputAction m_PlayerControl_Run;
    private readonly InputAction m_PlayerControl_MousePosition;
    private readonly InputAction m_PlayerControl_Interaction;
    private readonly InputAction m_PlayerControl_RightBtnUse;
    private readonly InputAction m_PlayerControl_LeftBtnUse;
    public struct PlayerControlActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLook => m_Wrapper.m_PlayerControl_MouseLook;
        public InputAction @Move => m_Wrapper.m_PlayerControl_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerControl_Jump;
        public InputAction @Run => m_Wrapper.m_PlayerControl_Run;
        public InputAction @MousePosition => m_Wrapper.m_PlayerControl_MousePosition;
        public InputAction @Interaction => m_Wrapper.m_PlayerControl_Interaction;
        public InputAction @RightBtnUse => m_Wrapper.m_PlayerControl_RightBtnUse;
        public InputAction @LeftBtnUse => m_Wrapper.m_PlayerControl_LeftBtnUse;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Add(instance);
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
            @RightBtnUse.started += instance.OnRightBtnUse;
            @RightBtnUse.performed += instance.OnRightBtnUse;
            @RightBtnUse.canceled += instance.OnRightBtnUse;
            @LeftBtnUse.started += instance.OnLeftBtnUse;
            @LeftBtnUse.performed += instance.OnLeftBtnUse;
            @LeftBtnUse.canceled += instance.OnLeftBtnUse;
        }

        private void UnregisterCallbacks(IPlayerControlActions instance)
        {
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
            @RightBtnUse.started -= instance.OnRightBtnUse;
            @RightBtnUse.performed -= instance.OnRightBtnUse;
            @RightBtnUse.canceled -= instance.OnRightBtnUse;
            @LeftBtnUse.started -= instance.OnLeftBtnUse;
            @LeftBtnUse.performed -= instance.OnLeftBtnUse;
            @LeftBtnUse.canceled -= instance.OnLeftBtnUse;
        }

        public void RemoveCallbacks(IPlayerControlActions instance)
        {
            if (m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlActions @PlayerControl => new PlayerControlActions(this);

    // UIControl
    private readonly InputActionMap m_UIControl;
    private List<IUIControlActions> m_UIControlActionsCallbackInterfaces = new List<IUIControlActions>();
    private readonly InputAction m_UIControl_QuicklyShift;
    private readonly InputAction m_UIControl_Pause;
    private readonly InputAction m_UIControl_Scroll;
    private readonly InputAction m_UIControl_TriggerInventory;
    public struct UIControlActions
    {
        private @PlayerControls m_Wrapper;
        public UIControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @QuicklyShift => m_Wrapper.m_UIControl_QuicklyShift;
        public InputAction @Pause => m_Wrapper.m_UIControl_Pause;
        public InputAction @Scroll => m_Wrapper.m_UIControl_Scroll;
        public InputAction @TriggerInventory => m_Wrapper.m_UIControl_TriggerInventory;
        public InputActionMap Get() { return m_Wrapper.m_UIControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControlActions set) { return set.Get(); }
        public void AddCallbacks(IUIControlActions instance)
        {
            if (instance == null || m_Wrapper.m_UIControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Add(instance);
            @QuicklyShift.started += instance.OnQuicklyShift;
            @QuicklyShift.performed += instance.OnQuicklyShift;
            @QuicklyShift.canceled += instance.OnQuicklyShift;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
            @TriggerInventory.started += instance.OnTriggerInventory;
            @TriggerInventory.performed += instance.OnTriggerInventory;
            @TriggerInventory.canceled += instance.OnTriggerInventory;
        }

        private void UnregisterCallbacks(IUIControlActions instance)
        {
            @QuicklyShift.started -= instance.OnQuicklyShift;
            @QuicklyShift.performed -= instance.OnQuicklyShift;
            @QuicklyShift.canceled -= instance.OnQuicklyShift;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
            @TriggerInventory.started -= instance.OnTriggerInventory;
            @TriggerInventory.performed -= instance.OnTriggerInventory;
            @TriggerInventory.canceled -= instance.OnTriggerInventory;
        }

        public void RemoveCallbacks(IUIControlActions instance)
        {
            if (m_Wrapper.m_UIControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIControlActions instance)
        {
            foreach (var item in m_Wrapper.m_UIControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIControlActions @UIControl => new UIControlActions(this);
    public interface IPlayerControlActions
    {
        void OnMouseLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnRightBtnUse(InputAction.CallbackContext context);
        void OnLeftBtnUse(InputAction.CallbackContext context);
    }
    public interface IUIControlActions
    {
        void OnQuicklyShift(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnTriggerInventory(InputAction.CallbackContext context);
    }
}
